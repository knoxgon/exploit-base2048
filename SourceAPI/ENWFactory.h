#ifndef ENWFACTORY_H
#define ENWFACTORY_H

#include <string>
#include <osrng.h>
#include <random>
#include <mutex>

class CryptoFactory {
public:
	CryptoFactory();
	~CryptoFactory();

	void V1_MyEncryptFile(CryptoPP::SecByteBlock &key, CryptoPP::SecByteBlock &iv, std::string publickeyfile, std::string filetoencrypt, std::string encryptedfile);
	void V1_MyDecryptFile(CryptoPP::SecByteBlock &key, CryptoPP::SecByteBlock &iv, std::string pvtFilename, std::string cipheredFile, std::string restoreFile);

	void V2_MyEncryptFile(CryptoPP::SecByteBlock &key, std::string filetoencrypt, std::string encryptedfile);
	void V2_MyDecryptFile(CryptoPP::SecByteBlock &key, std::string cipheredFile, std::string restoreFile);

	void V3_MyEncryptFile(std::string filetoencrypt, std::string encryptedfile);
	void V3_MyDecryptFile(std::string cipheredFile, std::string restoreFile);

	void GenerateRSAKeyPair(std::string privFilename, std::string pubFilename);

	std::string RSAESEncryption(std::string pubkeyfile, CryptoPP::SecByteBlock& key);
	std::string RSAESDecryption(std::string pvtkeyfile, const char* sessionkey);

	void SignAESKey(std::string privFilename, std::string AESKeyFileName,
		std::string signatureFilename);
	bool VerifyAESKey(std::string pubFilename, std::string AESKeyFileName,
		std::string signatureFilename);

private:
	bool pathExtFinder(std::string const &A, std::string const &B);
	CryptoPP::AutoSeededRandomPool rng;
	std::mutex mutex;
};

#endif