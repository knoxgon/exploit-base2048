#include "stdafx.h"
#include "MyFileSystem.h"
#include <iostream>
#include <Shlwapi.h>
#include "UserRights.h"

static int i = 0;

void MyFileSystem::commitMagicDirectory(const char * dir)
{
	Magics crtime;
	crtime.flagMe(false);
	SYSTEMTIME systime_for_cr;
	systime_for_cr.wYear = crtime.Year(); systime_for_cr.wMonth = crtime.Month(); systime_for_cr.wDay = crtime.Day();
	systime_for_cr.wHour = crtime.Hour(); systime_for_cr.wMinute = crtime.Minute(); systime_for_cr.wSecond = crtime.Second();
	systime_for_cr.wMilliseconds = crtime.Millisecond();
	
	FILETIME filetime_for_cr;

	SystemTimeToFileTime(&systime_for_cr, &filetime_for_cr);

	HANDLE dirname = CreateFile(dir,
		GENERIC_ALL, NULL,
		NULL, OPEN_ALWAYS, FILE_FLAG_BACKUP_SEMANTICS, NULL);

	if (dirname == INVALID_HANDLE_VALUE)
	{
		DWORD dwError = GetLastError();
		char tmp[255] = { 0 };
		FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, 0, dwError, 0,
			tmp, sizeof(tmp), 0);
		std::cout << tmp << "\n";
	}
	else {
		SetFileTime(dirname, &filetime_for_cr, &filetime_for_cr, &filetime_for_cr);
	}
	CloseHandle(dirname);
}

int MyFileSystem::makeDirectory(const char * dirName)
{
	CreateDirectory(dirName, NULL);
	return GetLastError();
}

void MyFileSystem::commitMagicFile(const char * file)
{
	Magics crtime, actime, wrtime;
	SYSTEMTIME systime_for_cr, systime_for_ac, systime_for_wr;
	
	crtime.flagMe(false);
	systime_for_cr.wYear = crtime.Year(); systime_for_cr.wMonth = crtime.Month(); systime_for_cr.wDay = crtime.Day();
	systime_for_cr.wHour = crtime.Hour(); systime_for_cr.wMinute = crtime.Minute(); systime_for_cr.wSecond = crtime.Second();
	systime_for_cr.wMilliseconds = crtime.Millisecond();
	
	std::cout << "CR: ";
	std::cout << systime_for_cr.wYear << "/" << systime_for_cr.wMonth << "/" << systime_for_cr.wDay << " -- ";
	std::cout << systime_for_cr.wHour << ":" << systime_for_cr.wMinute << ":" << systime_for_cr.wSecond << ":";
	std::cout << systime_for_cr.wMilliseconds << std::endl;
	
	actime.flagMe(true);
	systime_for_ac.wYear = actime.Year(); systime_for_ac.wMonth = actime.Month(); systime_for_ac.wDay = actime.Day();
	systime_for_ac.wHour = actime.Hour(); systime_for_ac.wMinute = actime.Minute(); systime_for_ac.wSecond = actime.Second();
	systime_for_ac.wMilliseconds = actime.Millisecond();

	std::cout << "AC: ";
	std::cout << systime_for_ac.wYear << "/" << systime_for_ac.wMonth << "/" << systime_for_ac.wDay << " -- ";
	std::cout << systime_for_ac.wHour << ":" << systime_for_ac.wMinute << ":" << systime_for_ac.wSecond << ":";
	std::cout << systime_for_ac.wMilliseconds << std::endl;

	wrtime.flagMe(true);
	systime_for_wr.wYear = wrtime.Year(); systime_for_wr.wMonth = wrtime.Month(); systime_for_wr.wDay = wrtime.Day();
	systime_for_wr.wHour = wrtime.Hour(); systime_for_wr.wMinute = wrtime.Minute(); systime_for_wr.wSecond = wrtime.Second();
	systime_for_wr.wMilliseconds = wrtime.Millisecond();

	std::cout << "WR: ";
	std::cout << systime_for_wr.wYear << "/" << systime_for_wr.wMonth << "/" << systime_for_wr.wDay << " -- ";
	std::cout << systime_for_wr.wHour << ":" << systime_for_wr.wMinute << ":" << systime_for_wr.wSecond << ":";
	std::cout << systime_for_wr.wMilliseconds << std::endl;

	FILETIME filetime_for_cr, filetime_for_ac, filetime_for_wr;

	SystemTimeToFileTime(&systime_for_cr, &filetime_for_cr);
	SystemTimeToFileTime(&systime_for_ac, &filetime_for_ac);
	SystemTimeToFileTime(&systime_for_wr, &filetime_for_wr);

	HANDLE filename = CreateFile(file,
		GENERIC_WRITE,
		FILE_SHARE_WRITE,
		NULL,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL,
		NULL);

	if (filename == INVALID_HANDLE_VALUE)
	{
		DWORD dwError = GetLastError();
		char tmp[255] = { 0 };
		FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, 0, dwError, 0,
			tmp, sizeof(tmp), 0);
		std::cout << tmp << "\n";
	}
	else {
		if (SetFileTime(filename, &filetime_for_cr, &filetime_for_ac, &filetime_for_wr) != 0) {
			CloseHandle(filename);
		}
		else {
			DWORD dwError = GetLastError();
			char tmp[255] = { 0 };
			FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, 0, dwError, 0,
				tmp, sizeof(tmp), 0);
			std::cout << tmp << "\n";
		}
	}
}

MyFileSystem::MyFileSystem()
{

	this->extensionList.push_back("*.doc");
	this->extensionList.push_back("*.avi");
	this->extensionList.push_back("*.bik");
	this->extensionList.push_back("*.dat");
	this->extensionList.push_back("*.h264");
	this->extensionList.push_back("*.m4v");
	this->extensionList.push_back("*.mkv");
	this->extensionList.push_back("*.mod");
	this->extensionList.push_back("*.mov");
	this->extensionList.push_back("*.mp4");
	this->extensionList.push_back("*.mpeg");
	this->extensionList.push_back("*.mpg");
	this->extensionList.push_back("*.gif");
	this->extensionList.push_back("*.ogv");
	this->extensionList.push_back("*.jpg");
	this->extensionList.push_back("*.jpeg");
	this->extensionList.push_back("*.prproj");
	this->extensionList.push_back("*.png");
	this->extensionList.push_back("*.rec");
	this->extensionList.push_back("*.rmvb");
	this->extensionList.push_back("*.swf");
	this->extensionList.push_back("*.bpg");
	this->extensionList.push_back("*.wmv");
	this->extensionList.push_back("*.3ga");
	this->extensionList.push_back("*.aac");
	this->extensionList.push_back("*.svg");
	this->extensionList.push_back("*.y");
	this->extensionList.push_back("*.yy");
	this->extensionList.push_back("*.l");
	this->extensionList.push_back("*.ll");
	this->extensionList.push_back("*.flac");
	this->extensionList.push_back("*.gp4");
	this->extensionList.push_back("*.gp5");
	this->extensionList.push_back("*.gpx");
	this->extensionList.push_back("*.logic");
	this->extensionList.push_back("*.m4a");
	this->extensionList.push_back("*.m4b");
	this->extensionList.push_back("*.m4p");
	this->extensionList.push_back("*.mp3");
	this->extensionList.push_back("*.ogg");
	this->extensionList.push_back("*.wav");
	this->extensionList.push_back("*.wma");
	this->extensionList.push_back("*.wpl");
	this->extensionList.push_back("*.zab");
	this->extensionList.push_back("*.arw");
	this->extensionList.push_back("*.cr2");
	this->extensionList.push_back("*.crw");
	this->extensionList.push_back("*.dcr");
	this->extensionList.push_back("*.dng");
	this->extensionList.push_back("*.fpx");
	this->extensionList.push_back("*.mrw");
	this->extensionList.push_back("*.nef");
	this->extensionList.push_back("*.orf");
	this->extensionList.push_back("*.pcd");
	this->extensionList.push_back("*.ptx");
	this->extensionList.push_back("*.txt");
	this->extensionList.push_back("*.raf");
	this->extensionList.push_back("*.raw");
	this->extensionList.push_back("*.rw2");
	this->extensionList.push_back("*.ai");
	this->extensionList.push_back("*.cdr");
	this->extensionList.push_back("*.csh");
	this->extensionList.push_back("*.csl");
	this->extensionList.push_back("*.cs");
	this->extensionList.push_back("*.pic");
	this->extensionList.push_back("*.svg");
	this->extensionList.push_back("*.svgz");
	this->extensionList.push_back("*.wmf");
	this->extensionList.push_back("*.icns");
	this->extensionList.push_back("*.ico");
	this->extensionList.push_back("*.mdi");
	this->extensionList.push_back("*.psb");
	this->extensionList.push_back("*.max");
	this->extensionList.push_back("*.pro");
	this->extensionList.push_back("*.stl");
	this->extensionList.push_back("*.u3d");
	this->extensionList.push_back("*.docm");
	this->extensionList.push_back("*.docx");
	this->extensionList.push_back("*.dot");
	this->extensionList.push_back("*.dotm");
	this->extensionList.push_back("*.dotx");
	this->extensionList.push_back("*.epub");
	this->extensionList.push_back("*.key");
	this->extensionList.push_back("*.keynote");
	this->extensionList.push_back("*.odf");
	this->extensionList.push_back("*.ods");
	this->extensionList.push_back("*.odt");
	this->extensionList.push_back("*.ott");
	this->extensionList.push_back("*.oxps");
	this->extensionList.push_back("*.pages");
	this->extensionList.push_back("*.pdf");
	this->extensionList.push_back("*.pmd");
	this->extensionList.push_back("*.pot");
	this->extensionList.push_back("*.potx");
	this->extensionList.push_back("*.pps");
	this->extensionList.push_back("*.ppsx");
	this->extensionList.push_back("*.ppt");
	this->extensionList.push_back("*.pptm");
	this->extensionList.push_back("*.pptx");
	this->extensionList.push_back("*.prn");
	this->extensionList.push_back("*.ps");
	this->extensionList.push_back("*.pub");
	this->extensionList.push_back("*.rtf");
	this->extensionList.push_back("*.sxw");
	this->extensionList.push_back("*.tpl");
	this->extensionList.push_back("*.vsd");
	this->extensionList.push_back("*.wpd");
	this->extensionList.push_back("*.wps");
	this->extensionList.push_back("*.wri");
	this->extensionList.push_back("*.xps");
	this->extensionList.push_back("*.big");
//	this->extensionList.push_back("*.bin");
	this->extensionList.push_back("*.cab");
	this->extensionList.push_back("*.dds");
	this->extensionList.push_back("*.hi");
	this->extensionList.push_back("*.lng");
	this->extensionList.push_back("*.pak");
	this->extensionList.push_back("*.res");
	this->extensionList.push_back("*.sav");
	this->extensionList.push_back("*.wotreplay");
	this->extensionList.push_back("*.wowpreplay");
	this->extensionList.push_back("*.asmx");
	this->extensionList.push_back("*.ashx");
	this->extensionList.push_back("*.aspx");
	this->extensionList.push_back("*.py");
	this->extensionList.push_back("*.cc");
	this->extensionList.push_back("*.src");
	this->extensionList.push_back("*.cpp");
	this->extensionList.push_back("*.c");
	this->extensionList.push_back("*.h");
	this->extensionList.push_back("*.hh");
	this->extensionList.push_back("*.jsp");
	this->extensionList.push_back("*.jspx");
	this->extensionList.push_back("*.wss");
	this->extensionList.push_back("*.do");
	this->extensionList.push_back("*.action");
	this->extensionList.push_back("*.js");
	this->extensionList.push_back("*.pl");
	this->extensionList.push_back("*.php");
	this->extensionList.push_back("*.php4");
	this->extensionList.push_back("*.php3");
}

void MyFileSystem::SeekFiles(std::string folderName)
{
	WIN32_FIND_DATA FileData;
	std::string folderNameWithSt = folderName + "*";
	HANDLE FirstFile = FindFirstFile(folderNameWithSt.c_str(), &FileData);
	if (FirstFile != INVALID_HANDLE_VALUE) {
		do {
			if (strcmp(FileData.cFileName, ".") != 0 && strcmp(FileData.cFileName, "..") != 0)
			{
				if ((FileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) == 16)
				{
					std::string NewPath = folderName + FileData.cFileName;
					NewPath += "\\";
					SeekFiles(NewPath);
				}
				else
				{
					for (auto x : this->extensionList) {
						if (PathMatchSpec(FileData.cFileName, x)) {
							this->fileList.push_back(folderName + FileData.cFileName);
						}
					}
				}
			}
		} while (FindNextFile(FirstFile, &FileData));
	}
	else {
		int err = GetLastError();
		switch (err)
		{
		case 5:
			std::cout << "FATAL ERROR: " << err << " -> " << FileData.cFileName << std::endl;
			break;
		default:
			break;
		}
	}
}

std::vector<std::string> MyFileSystem::getAquiredFiles() const
{
	return this->fileList;
}

std::vector<LPCSTR> MyFileSystem::getExtensions() const
{
	return this->extensionList;
}
